{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/":{"get":{"summary":"Main","description":"Renders the HTML response for the root path (\"/\") of the FastAPI application.\n\nReturns:\n    HTMLResponse: The HTML response to be returned to the client.","operationId":"main__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/user/register":{"post":{"tags":["User Management"],"summary":"Register User","description":"Asynchronously registers a new user with the provided user data.\n\nArgs:\n    create_user_data (UserCreatePayload): The user data to create a new user with.\n\nReturns:\n    A dictionary with a success message indicating that the registration was successful and the user should check their email for verification.\n\nRaises:\n    HTTPException:\n        - If the user creation fails, with a status code of 500 and a detail message of \"User creation failed\".\n        - If the user's email is missing from the user object, with a status code of 500 and a detail message of \"Email missing from user object\".\n        - If the username or email is already registered, with a status code of 400 and a detail message of \"Username or email already registered\".\n        - If there is an error sending the verification email, with a status code of 500 and a detail message of \"Failed to send verification email: {error}\".","operationId":"register_user_api_v1_user_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreatePayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/user/verify-email":{"get":{"tags":["User Management"],"summary":"Verify Email","description":"Verifies the email of a user by decoding a verification token and updating the user's is_verified status.\n\nArgs:\n    token (str): The verification token to decode.\n\nReturns:\n    A dictionary with a success message indicating that the email verification was successful.\n\nRaises:\n    HTTPException:\n        - If the user is not found, with a status code of 404 and a detail message of \"User not found\".\n        - If the verification token has expired, with a status code of 400 and a detail message of \"Verification token has expired\".\n        - If the verification token is invalid, with a status code of 400 and a detail message of \"Invalid verification token\".","operationId":"verify_email_api_v1_user_verify_email_get","parameters":[{"name":"token","in":"query","required":true,"schema":{"type":"string","title":"Token"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/user/login":{"post":{"tags":["User Management"],"summary":"Login User","description":"Authenticates a user and generates access and refresh tokens.\n\nArgs:\n    form_data (OAuth2PasswordRequestForm): The form data containing the username and password.\n\nReturns:\n    dict: A dictionary containing the access token, refresh token, token type, and user information.\n\nRaises:\n    HTTPException:\n        - If the user is not authenticated, with a status code of 401 and a detail message of \"Incorrect email or password\".","operationId":"login_user_api_v1_user_login_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_login_user_api_v1_user_login_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/user/all":{"get":{"tags":["User Management"],"summary":"Get All Users","description":"Get all users.\n\nArgs:\n    current_user (User): The current authenticated user.\n\nReturns:\n    list[UsersDetailResponse]: A list of user details.","operationId":"get_all_users_api_v1_user_all_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/UsersDetailResponse"},"type":"array","title":"Response Get All Users Api V1 User All Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/details":{"get":{"tags":["User Management"],"summary":"Read User Detail","description":"Reads the user's detail, including their image content converted to base64.\n\nArgs:\n    current_user (User): The current authenticated user.\n\nReturns:\n    User: The current user with their image content converted to base64.","operationId":"read_user_detail_api_v1_user_details_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CombinedResponse"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/upload-image":{"post":{"tags":["User Management"],"summary":"Upload Image","description":"Uploads an image for the current user.\n\nArgs:\n    file (UploadFile): The uploaded file containing the image.\n    current_user (User): The current authenticated user.\n\nReturns:\n    Image: The uploaded image.","operationId":"upload_image_api_v1_user_upload_image_post","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_upload_image_api_v1_user_upload_image_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/image/update":{"put":{"tags":["User Management"],"summary":"Image Update","description":"Updates the image for the current user.\n\nArgs:\n    file (UploadFile): The uploaded file containing the image.\n    current_user (User): The current authenticated user.\n\nReturns:\n    Image: The updated image.","operationId":"image_update_api_v1_user_image_update_put","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_image_update_api_v1_user_image_update_put"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/change-password":{"patch":{"tags":["User Management"],"summary":"Change Password","description":"Updates the password for the current authenticated user.\n\nArgs:\n    request (PasswordChangePayload): The payload containing the old password, new password, and confirmation of the new password.\n    current_user (User): The current authenticated user.\n\nRaises:\n    HTTPException: If the old password is incorrect, or the new password and confirmation do not match.\n\nReturns:\n    dict: A message indicating the password has been reset successfully.","operationId":"change_password_api_v1_user_change_password_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PasswordChangePayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/change-details":{"patch":{"tags":["User Management"],"summary":"Change User Details","description":"Updates the details (email and username) for the current authenticated user.\n\nArgs:\n    payload (DetailsChangePayload): The payload containing the new email and username.\n    current_user (User): The current authenticated user.\n\nReturns:\n    dict: A message indicating the user details have been updated successfully.","operationId":"change_user_details_api_v1_user_change_details_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DetailsChangePayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/user/reset-password":{"post":{"tags":["User Management"],"summary":"Reset Password","description":"Resets the password for a user based on the provided reset token and new password.\n\nArgs:\n    reset_data (ResetPasswordPayload): A payload containing the reset token and new password.\n\nRaises:\n    HTTPException: If the user is not found, the new password and confirm password do not match, or the new password does not meet the complexity requirements.\n\nReturns:\n    dict: A message indicating the password reset was successful.","operationId":"reset_password_api_v1_user_reset_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResetPasswordPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/user/request-password-reset":{"post":{"tags":["User Management"],"summary":"Request Password Reset","description":"Sends a password reset email to the user with a reset link.\n\nArgs:\n    email (EmailStr): The email address of the user to send the reset email to.\n    user (User): The user object retrieved by the `get_user_by_email` dependency.\n\nRaises:\n    HTTPException: If the user is not found or if there is an error sending the email.\n\nReturns:\n    dict: A message indicating that the password reset email has been sent.","operationId":"request_password_reset_api_v1_user_request_password_reset_post","parameters":[{"name":"email","in":"query","required":true,"schema":{"type":"string","title":"Email"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/projects/create":{"post":{"tags":["Project Management"],"summary":"Add Project","description":"Adds a new project for the current user.\n\nArgs:\n    payload (CreateProjectPayload): The payload containing the details of the new project.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The response from the `create_project` function, which likely includes the newly created project.","operationId":"add_project_api_v1_projects_create_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateProjectPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/projects/show":{"get":{"tags":["Project Management"],"summary":"Show Projects","description":"Retrieves a list of projects for the current authenticated user.\n\nArgs:\n    current_user (User): The current authenticated user.\n\nReturns:\n    The response from the `display_projects` function, which likely includes a list of projects for the current user.","operationId":"show_projects_api_v1_projects_show_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/projects/update":{"patch":{"tags":["Project Management"],"summary":"Update Project","description":"Updates an existing project for the current authenticated user.\n\nArgs:\n    payload (UpdateProjectPayload): The payload containing the updated details of the project.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The response from the `project_update` function, which likely includes the updated project details.","operationId":"update_project_api_v1_projects_update_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateProjectPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/projects/remove":{"delete":{"tags":["Project Management"],"summary":"Delete Project","description":"Deletes an existing project for the current authenticated user.\n\nArgs:\n    payload (RemoveProjectPayload): The payload containing the details of the project to be deleted.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The response from the `remove_project` function, which likely includes the result of the delete operation.","operationId":"delete_project_api_v1_projects_remove_delete","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveProjectPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/projects/project/show":{"get":{"tags":["Project Management"],"summary":"Get Project","description":"Retrieves the details of a specific project for the current authenticated user.\n\nArgs:\n    project_id (int): The ID of the project to retrieve.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The response from the `display_project` function, which likely includes the details of the requested project.","operationId":"get_project_api_v1_projects_project_show_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"project_id","in":"query","required":true,"schema":{"type":"integer","title":"Project Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/tasks/add":{"post":{"tags":["Task Management"],"summary":"Add Task","description":"Adds a new task to the system.\n\nArgs:\n    task (CreateTaskPayload): The details of the task to be created.\n    current_user (User): The user creating the task, obtained from the current user token.\n\nReturns:\n    The created task.","operationId":"add_task_api_v1_tasks_add_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTaskPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/tasks/show":{"get":{"tags":["Task Management"],"summary":"Show Tasks","description":"Retrieves and returns a list of tasks for the specified project.\n\nArgs:\n    project_id (int): The ID of the project to retrieve tasks for.\n    current_user (User): The current user, obtained from the user token.\n\nReturns:\n    list[TaskResponse]: A list of task responses for the specified project.","operationId":"show_tasks_api_v1_tasks_show_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"project_id","in":"query","required":true,"schema":{"title":"Project Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/TaskResponse"},"title":"Response Show Tasks Api V1 Tasks Show Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/tasks/show/user":{"get":{"tags":["Task Management"],"summary":"Show Tasks","description":"Retrieves and returns a list of tasks for the specified user.\n\nArgs:\n    current_user (User): The current user, obtained from the user token.\n\nReturns:\n    list[TaskResponse]: A list of task responses for the specified user.","operationId":"show_tasks_api_v1_tasks_show_user_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/TaskResponse"},"type":"array","title":"Response Show Tasks Api V1 Tasks Show User Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/tasks/remove":{"delete":{"tags":["Task Management"],"summary":"Delete Task","description":"Deletes a task based on the provided payload.\n\nArgs:\n    payload (RemoveTaskPayload): The details of the task to be deleted.\n    current_user (User): The user deleting the task, obtained from the current user token.\n\nReturns:\n    The result of the task deletion operation.","operationId":"delete_task_api_v1_tasks_remove_delete","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTaskPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/tasks/update":{"patch":{"tags":["Task Management"],"summary":"Update Task","description":"Updates a task based on the provided payload.\n\nArgs:\n    payload (UpdateTaskPayload): The details of the task to be updated.\n    current_user (User): The user updating the task, obtained from the current user token.\n\nReturns:\n    The result of the task update operation.","operationId":"update_task_api_v1_tasks_update_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTaskPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/comments/add":{"post":{"tags":["Comment Management"],"summary":"Add Comment","description":"Add a new comment to a task.\n\nArgs:\n    comment (CreateCommentPayload): The comment payload containing the task ID and comment text.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The created comment.","operationId":"add_comment_api_v1_comments_add_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateCommentPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/comments/show":{"get":{"tags":["Comment Management"],"summary":"Show Comments","description":"Display the comments for a given task.\n\nArgs:\n    task_id (int): The ID of the task to retrieve comments for.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The list of comments for the specified task.","operationId":"show_comments_api_v1_comments_show_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"task_id","in":"query","required":true,"schema":{"title":"Task Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/comments/remove":{"delete":{"tags":["Comment Management"],"summary":"Delete Comment","description":"Delete a comment for a given task.\n\nArgs:\n    payload (RemoveCommentPayload): The payload containing the ID of the comment to be deleted and the ID of the task.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The result of removing the comment and the updated list of comments for the specified task.","operationId":"delete_comment_api_v1_comments_remove_delete","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveCommentPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/v1/comments/update":{"put":{"tags":["Comment Management"],"summary":"Update Comment","description":"Update a comment for a given task.\n\nArgs:\n    payload (UpdateCommentPayload): The payload containing the ID of the comment to be updated, the updated comment text, and the ID of the task.\n    current_user (User): The current authenticated user.\n\nReturns:\n    The result of updating the comment and the updated list of comments for the specified task.","operationId":"update_comment_api_v1_comments_update_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateCommentPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}}},"components":{"schemas":{"Body_image_update_api_v1_user_image_update_put":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body_image_update_api_v1_user_image_update_put"},"Body_login_user_api_v1_user_login_post":{"properties":{"grant_type":{"anyOf":[{"type":"string","pattern":"password"},{"type":"null"}],"title":"Grant Type"},"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"},"scope":{"type":"string","title":"Scope","default":""},"client_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Id"},"client_secret":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Secret"}},"type":"object","required":["username","password"],"title":"Body_login_user_api_v1_user_login_post"},"Body_upload_image_api_v1_user_upload_image_post":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body_upload_image_api_v1_user_upload_image_post"},"CombinedResponse":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"id":{"type":"integer","title":"Id"},"is_active":{"type":"boolean","title":"Is Active"},"content":{"type":"string","title":"Content"}},"type":"object","required":["username","email","id","is_active"],"title":"CombinedResponse","description":"Represents a combined response, including the user's details as well as additional content."},"CreateCommentPayload":{"properties":{"task_id":{"type":"integer","title":"Task Id"},"comment":{"type":"string","title":"Comment"}},"type":"object","required":["task_id","comment"],"title":"CreateCommentPayload","description":"Represents the payload for creating a new comment on a task."},"CreateProjectPayload":{"properties":{"project_name":{"type":"string","title":"Project Name"},"project_description":{"type":"string","title":"Project Description"},"start_date":{"type":"string","format":"date","title":"Start Date"},"end_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"End Date"}},"type":"object","required":["project_name","project_description","start_date"],"title":"CreateProjectPayload","description":"Defines a Pydantic model for the payload of a request to create a new project."},"CreateTaskPayload":{"properties":{"project_id":{"type":"integer","title":"Project Id"},"task":{"type":"string","title":"Task"},"status":{"type":"string","title":"Status"},"priority":{"type":"string","title":"Priority"},"assignee_id":{"type":"integer","title":"Assignee Id"},"due_date":{"type":"string","format":"date","title":"Due Date"}},"type":"object","required":["project_id","task","status","priority","assignee_id","due_date"],"title":"CreateTaskPayload","description":"Represents the payload for creating a new task."},"DetailsChangePayload":{"properties":{"username":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Username"},"email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Email"}},"type":"object","title":"DetailsChangePayload","description":"Represents the payload for changing a user's details, such as username and email."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ImageResponse":{"properties":{"id":{"type":"integer","title":"Id"},"filename":{"type":"string","title":"Filename"},"url":{"type":"string","title":"Url"},"upload_date":{"type":"string","format":"date-time","title":"Upload Date"}},"type":"object","required":["id","filename","url","upload_date"],"title":"ImageResponse","description":"Represents the response data for an uploaded image.\n\n:param id: The unique identifier for the image.\n:param filename: The name of the image file.\n:param url: The URL where the image can be accessed.\n:param upload_date: The date and time when the image was uploaded."},"PasswordChangePayload":{"properties":{"old_password":{"type":"string","title":"Old Password"},"new_password":{"type":"string","title":"New Password"},"confirm_new_password":{"type":"string","title":"Confirm New Password"}},"type":"object","required":["old_password","new_password","confirm_new_password"],"title":"PasswordChangePayload","description":"Represents the payload for changing a user's password."},"RemoveCommentPayload":{"properties":{"task_id":{"type":"integer","title":"Task Id"},"comment_id":{"type":"integer","title":"Comment Id"}},"type":"object","required":["task_id","comment_id"],"title":"RemoveCommentPayload","description":"Represents the payload for removing a comment from a task."},"RemoveProjectPayload":{"properties":{"project_id":{"type":"integer","title":"Project Id"}},"type":"object","required":["project_id"],"title":"RemoveProjectPayload","description":"Defines a Pydantic model for the payload of a request to remove a project."},"RemoveTaskPayload":{"properties":{"project_id":{"type":"integer","title":"Project Id"},"task_id":{"type":"integer","title":"Task Id"}},"type":"object","required":["project_id","task_id"],"title":"RemoveTaskPayload","description":"Represents the payload for removing a task."},"ResetPasswordPayload":{"properties":{"token":{"type":"string","title":"Token"},"new_password":{"type":"string","title":"New Password"},"confirm_password":{"type":"string","title":"Confirm Password"}},"type":"object","required":["token","new_password","confirm_password"],"title":"ResetPasswordPayload","description":"Represents the payload for resetting a user's password."},"TaskResponse":{"properties":{"id":{"type":"integer","title":"Id"},"task":{"type":"string","title":"Task"},"status":{"type":"string","title":"Status"},"created_on":{"type":"string","format":"date-time","title":"Created On"},"priority":{"type":"string","title":"Priority"},"assignee":{"anyOf":[{"$ref":"#/components/schemas/UserResource"},{"type":"null"}]},"due_date":{"type":"string","format":"date","title":"Due Date"}},"type":"object","required":["id","task","status","created_on","priority","due_date"],"title":"TaskResponse","description":"Represents the response data for a task.\n\nAttributes:\n    id (int): The unique identifier for the task.\n    task (str): The title or description of the task.\n    status (str): The current status of the task.\n    created_on (datetime): The date and time the task was created.\n    priority (str): The priority level of the task.\n    assignee (Optional[UserResource]): The user assigned to the task.\n    due_date (date): The date the task is due."},"UpdateCommentPayload":{"properties":{"task_id":{"type":"integer","title":"Task Id"},"comment_id":{"type":"integer","title":"Comment Id"},"new_comment":{"type":"string","title":"New Comment"}},"type":"object","required":["task_id","comment_id","new_comment"],"title":"UpdateCommentPayload","description":"Represents the payload for updating an existing comment on a task."},"UpdateProjectPayload":{"properties":{"project_id":{"type":"integer","title":"Project Id"},"new_project_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"New Project Name"},"new_project_description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"New Project Description"},"start_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Start Date"},"end_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"End Date"}},"type":"object","required":["project_id"],"title":"UpdateProjectPayload","description":"Defines a Pydantic model for the payload of a request to update an existing project."},"UpdateTaskPayload":{"properties":{"project_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Project Id"},"task_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Task Id"},"new_task":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"New Task"},"status":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Status"},"priority":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Priority"},"assignee_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Assignee Id"},"due_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Due Date"}},"type":"object","title":"UpdateTaskPayload","description":"Represents the payload for updating an existing task."},"UserCreatePayload":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"}},"type":"object","required":["username","email","password"],"title":"UserCreatePayload","description":"Represents the payload for creating a new user."},"UserResource":{"properties":{"username":{"type":"string","title":"Username"}},"type":"object","required":["username"],"title":"UserResource","description":"Represents a user resource, containing the username."},"UsersDetailResponse":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"id":{"type":"integer","title":"Id"},"is_active":{"type":"boolean","title":"Is Active"}},"type":"object","required":["username","email","id","is_active"],"title":"UsersDetailResponse","description":"Represents a user's details, including their username, email, unique identifier, and active status."},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"/api/v1/user/login"}}}}}}